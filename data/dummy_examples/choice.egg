(datatype Term (f i64 Term Term) (g Term) (x i64) (A) (B) (Cons Term Term) (Nil))

(rewrite (g (x n)) (f n (A) (B)))

; At every node, we have a binary choice of (g (x n)) : cost 2 or (f n A B) : cost 3 (integers have cost 0)
; Tree extraction would pick (g (x n))
; Dag extraction notices the shared subterm A B across choices and makes the opposite choice.
; A and B are amoritized across uses, so cost (f n A B) ~ 1
(let t
    (Cons  (g (x 0))
    (Cons  (g (x 1))
    (Cons  (g (x 2))
    (Cons  (g (x 3))
    (Cons  (g (x 4))
    (Cons  (g (x 5))
    (Cons  (g (x 6))
    (Cons  (g (x 7))
    (Cons  (g (x 8))
    (Cons  (g (x 9))
    (Cons  (g (x 10))
    (Cons  (g (x 11))
    (Cons  (g (x 12))
    (Cons  (g (x 13))
    (Cons  (g (x 14))
    (Cons  (g (x 15))
    (Cons  (g (x 16))
    (Nil)
))))))))))))))))))
(run 10)



